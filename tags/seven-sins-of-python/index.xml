<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>seven-sins-of-python on Klebstoff</title><link>http://kjczarne.github.io/tags/seven-sins-of-python/</link><description>Recent content in seven-sins-of-python on Klebstoff</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright 2021 Krzysztof J. Czarnecki. Fair use permitted with authorship attribution. Commercial use disallowed without explicit permission. Some links in blog articles are affiliate links when noted.</copyright><lastBuildDate>Mon, 17 Jan 2022 20:16:32 +0100</lastBuildDate><atom:link href="http://kjczarne.github.io/tags/seven-sins-of-python/index.xml" rel="self" type="application/rss+xml"/><item><title>Seven Sins of Python - Sin 6</title><link>http://kjczarne.github.io/2022-01-17-seven-sins-of-python-sin-6/</link><pubDate>Mon, 17 Jan 2022 20:16:32 +0100</pubDate><guid>http://kjczarne.github.io/2022-01-17-seven-sins-of-python-sin-6/</guid><description>Sin number 6: Packaging not done right Packaging Python projects properly can be truly a pain in the neck. However learning how to properly set up a package is extremely valuable because adherence to standards means more people can use your package efficiently.
ðŸ‘‰ The biggest sin of all things package-related is storing Python projects as simple collections of directories.
Whence the temptation? Python is a simple scripting lanugage so the natural tendency newcomers have is to simply create folders with a bunch of scripts and then run those folders one by one.</description></item><item><title>Seven Sins of Python - Sin 5</title><link>http://kjczarne.github.io/2021-12-28-seven-sins-of-python-sin-5/</link><pubDate>Tue, 28 Dec 2021 23:43:52 +0100</pubDate><guid>http://kjczarne.github.io/2021-12-28-seven-sins-of-python-sin-5/</guid><description>Sin number 5: global destruction Every time I am asked about global keyword in Python, I get a split-second heart attack. Personally I think it is one of the most unnecessary and dangerous keywords that Python has to offer. I will go one step further and postulate that if you&amp;rsquo;re using nonlocal you&amp;rsquo;re probably doing it wrong.
ðŸ‘‰ The essence of this problem is misunderstanding the purpose or the mechanics of scope in Python.</description></item><item><title>Seven Sins of Python - Sin 4</title><link>http://kjczarne.github.io/2021-12-27-seven-sins-of-python-sin-4/</link><pubDate>Mon, 27 Dec 2021 20:46:12 +0100</pubDate><guid>http://kjczarne.github.io/2021-12-27-seven-sins-of-python-sin-4/</guid><description>Sin number 4: Exception frenzy Python&amp;rsquo;s Exception class is probably one of the most abused and misused features of the language. It&amp;rsquo;s also something that no developer can escape from.
Whence the temptation? An Exception is a pretty natural element of any language. In all languages one will always have some need for a runtime error. In case of Python, most runtime errors inherit from the Exception class. Though technically not a base class (for that would be BaseException), it should be treated like a base class and it often isn&amp;rsquo;t.</description></item><item><title>Seven Sins of Python - Sin 3</title><link>http://kjczarne.github.io/2021-12-17-seven-sins-of-python-sin-3/</link><pubDate>Fri, 17 Dec 2021 22:26:21 +0100</pubDate><guid>http://kjczarne.github.io/2021-12-17-seven-sins-of-python-sin-3/</guid><description>Sin number 3: Unconditional romance with ducktyping Whence the temptation? Python is truly awesome. In C++17 there is no easy way of expressing ranges. In Python an integer range \(\langle 0, 4 \rangle\) is simply range(0, 5).
The syntactic simplicity and high conciseness of the language was originally related to the fact that Python does not have static typing. In Python ducktyping means that you can actually call a function that expects an integer with a string and you will likely only realize at runtime, since there is no compilation step.</description></item><item><title>Seven Sins of Python - Sin 2</title><link>http://kjczarne.github.io/2021-12-16-seven-sins-of-python-sin-2/</link><pubDate>Thu, 16 Dec 2021 23:51:37 +0100</pubDate><guid>http://kjczarne.github.io/2021-12-16-seven-sins-of-python-sin-2/</guid><description>Sin number 2: too few optimized functions used This one is pretty common especially for newcomers who have learnt enough about Python to be able to loop over data structures but haven&amp;rsquo;t yet realized how slow Python loops really are.
Whence the temptation? If you&amp;rsquo;re fresh to Python, the temptation to create for loops everywhere for lists and dictionaries is immense. Consider a fairly simple example, where we loop over 100000 random integers and we apply a simple mathematical operation to each of those integers.</description></item><item><title>Seven Sins of Python - Sin 1</title><link>http://kjczarne.github.io/2021-12-10-seven-sins-of-python-sin-1/</link><pubDate>Fri, 10 Dec 2021 23:28:34 +0100</pubDate><guid>http://kjczarne.github.io/2021-12-10-seven-sins-of-python-sin-1/</guid><description>Sin number 1: Do not modify builtins and globals This is one of the biggest no-nos for me and something that I shot myself in the foot at least twice in my career as a Python dev. I&amp;rsquo;ve also seen this used in actual production code that was deployed to some important clients.
Whence the temptation? builtins is a collection of objects that are available from within any Python script and are loaded before any script is executed by the interpreter.</description></item><item><title>Seven Sins of Python - Intro</title><link>http://kjczarne.github.io/2021-12-10-seven-sins-of-python-intro/</link><pubDate>Fri, 10 Dec 2021 22:28:34 +0100</pubDate><guid>http://kjczarne.github.io/2021-12-10-seven-sins-of-python-intro/</guid><description>Seven Sins of Python - intro Python is not only the most popular programming language (according to TIOBE as of 2021) but also one of the simplest to work with and easiest to learn. Python is great for a wide range of applications from web development through command line tools to large-scale automation and deep learning projects.
It is far from the snappiest programming languages in terms of performance, however many other languages can be used alongside Python when performance is of essence.</description></item></channel></rss>