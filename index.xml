<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Chris</title><link>http://kjczarne.github.io/</link><description>Recent content on Chris</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2024 Chris J. Czarnecki. Fair use permitted with authorship attribution. Commercial use disallowed without explicit permission. Some links in blog articles are affiliate links when noted.</copyright><lastBuildDate>Mon, 05 Aug 2024 20:32:50 -0400</lastBuildDate><atom:link href="http://kjczarne.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>I used Vim for 3 weeks. Here's how it went</title><link>http://kjczarne.github.io/posts/i-used-vim-for-3-weeks/</link><pubDate>Mon, 04 Jul 2022 23:15:34 +0200</pubDate><guid>http://kjczarne.github.io/posts/i-used-vim-for-3-weeks/</guid><description>I have recently had a few days off from work due to festivities in Germany and I used some of my spare time to finally investigate the Vim editor.
For those who do not know Vim is a text editor, which was developed by Bram Moolenaar and released for the first time in 1991. So it&amp;rsquo;s not that old yet. But if you consider the fact that this is an improved version of Billy Joy&amp;rsquo;s vi editor which was originally developed in 1976 for the UNIX operating system, things start to get interesting as you realize for how long it&amp;rsquo;s been around and you&amp;rsquo;ve lived merrily without ever trying it.</description></item><item><title>Seven Sins of Python - Sin 7</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-7/</link><pubDate>Mon, 04 Jul 2022 22:01:01 +0200</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-7/</guid><description>Sin number 7: from nightmare import * I&amp;rsquo;ve been thinking long about which sin to name as the last in the grand seven of Python No-Nos. It finally came to me when working on one of legacy projects I&amp;rsquo;ve been contributing to (sadly this one is not open-source, so I cannot share the details).
star imports -&amp;gt; imports formed like the titular from nightmare import *.
Whence the temptation? Star imports are tempting because they seem to reduce boilerplate.</description></item><item><title>Seven Sins of Python - Sin 6</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-6/</link><pubDate>Mon, 17 Jan 2022 20:16:32 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-6/</guid><description>Sin number 6: Packaging not done right Packaging Python projects properly can be truly a pain in the neck. However learning how to properly set up a package is extremely valuable because adherence to standards means more people can use your package efficiently.
ðŸ‘‰ The biggest sin of all things package-related is storing Python projects as simple collections of directories.
Whence the temptation? Python is a simple scripting lanugage so the natural tendency newcomers have is to simply create folders with a bunch of scripts and then run those folders one by one.</description></item><item><title>Forget New Year's Resolutions, do this instead</title><link>http://kjczarne.github.io/posts/forget-new-years-resolutions-do-this-instead/</link><pubDate>Wed, 05 Jan 2022 16:53:35 +0100</pubDate><guid>http://kjczarne.github.io/posts/forget-new-years-resolutions-do-this-instead/</guid><description>A while ago I had a brainwave when reading about the Agile Software Development best practices. I&amp;rsquo;ve recently found this idea somewhere in my todo lists and decided to finally give it a try, especially given the fact that my new year&amp;rsquo;s resolutions never worked for me.
ðŸ‘‰ The idea: forget new year&amp;rsquo;s resolutions, write user stories for your life instead.
Before I go in-depth on why I think you should write something akin to user stories for your life plans, since it&amp;rsquo;s barely the beginning of January 2022 let&amp;rsquo;s look at why new year&amp;rsquo;s resolutions are not the way to go (at least in my opinion).</description></item><item><title>Seven Sins of Python - Sin 5</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-5/</link><pubDate>Tue, 28 Dec 2021 23:43:52 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-5/</guid><description>Sin number 5: global destruction Every time I am asked about global keyword in Python, I get a split-second heart attack. Personally I think it is one of the most unnecessary and dangerous keywords that Python has to offer. I will go one step further and postulate that if you&amp;rsquo;re using nonlocal you&amp;rsquo;re probably doing it wrong.
ðŸ‘‰ The essence of this problem is misunderstanding the purpose or the mechanics of scope in Python.</description></item><item><title>Seven Sins of Python - Sin 4</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-4/</link><pubDate>Mon, 27 Dec 2021 20:46:12 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-4/</guid><description>Sin number 4: Exception frenzy Python&amp;rsquo;s Exception class is probably one of the most abused and misused features of the language. It&amp;rsquo;s also something that no developer can escape from.
Whence the temptation? An Exception is a pretty natural element of any language. In all languages one will always have some need for a runtime error. In case of Python, most runtime errors inherit from the Exception class. Though technically not a base class (for that would be BaseException), it should be treated like a base class and it often isn&amp;rsquo;t.</description></item><item><title>C++ is the new COBOL</title><link>http://kjczarne.github.io/posts/c++-is-the-new-cobol/</link><pubDate>Tue, 21 Dec 2021 22:34:07 +0100</pubDate><guid>http://kjczarne.github.io/posts/c++-is-the-new-cobol/</guid><description>C++ is a great language. As much as I hate it I cannot ignore how important it is and how much it brought to the table in it&amp;rsquo;s 36 years of existence. I have tremendous respect for Bjarne Stroustrup for creating the so-called C with classes and I personally think that it&amp;rsquo;s one of the best things that happened in programming language designs around the time when it came to existence.</description></item><item><title>The Most Important Piece of Advice</title><link>http://kjczarne.github.io/posts/the-most-important-piece-of-advice/</link><pubDate>Sat, 18 Dec 2021 01:59:20 +0100</pubDate><guid>http://kjczarne.github.io/posts/the-most-important-piece-of-advice/</guid><description>If were to read only one post from this blog and ignore all the others, here is a piece of advice that I would like to give to everyone who wants to vastly improve their career.
ðŸ‘‰ The most priceless thing that will help you excel in anything you do is your brain. The second most priceless thing is your second brain.
What I mean by that?
If you are able to build a robust reference system with a very short lookup time for any possible piece of information, you will excel at everything you do.</description></item><item><title>Seven Sins of Python - Sin 3</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-3/</link><pubDate>Fri, 17 Dec 2021 22:26:21 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-3/</guid><description>Sin number 3: Unconditional romance with ducktyping Whence the temptation? Python is truly awesome. In C++17 there is no easy way of expressing ranges. In Python an integer range \(\langle 0, 4 \rangle\) is simply range(0, 5).
The syntactic simplicity and high conciseness of the language was originally related to the fact that Python does not have static typing. In Python ducktyping means that you can actually call a function that expects an integer with a string and you will likely only realize at runtime, since there is no compilation step.</description></item><item><title>Notebooks</title><link>http://kjczarne.github.io/nb/</link><pubDate>Fri, 17 Dec 2021 00:18:34 +0100</pubDate><guid>http://kjczarne.github.io/nb/</guid><description>Here are links to some of the Jupyter Notebooks mentioned in my blog posts:
Python - timing builtins vs. loops</description></item><item><title>Seven Sins of Python - Sin 2</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-2/</link><pubDate>Thu, 16 Dec 2021 23:51:37 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-2/</guid><description>Sin number 2: too few optimized functions used This one is pretty common especially for newcomers who have learnt enough about Python to be able to loop over data structures but haven&amp;rsquo;t yet realized how slow Python loops really are.
Whence the temptation? If you&amp;rsquo;re fresh to Python, the temptation to create for loops everywhere for lists and dictionaries is immense. Consider a fairly simple example, where we loop over 100000 random integers and we apply a simple mathematical operation to each of those integers.</description></item><item><title>About Me</title><link>http://kjczarne.github.io/about/</link><pubDate>Fri, 10 Dec 2021 23:28:34 +0100</pubDate><guid>http://kjczarne.github.io/about/</guid><description>I have spent almost 3 years as a Software Developer at Technica Engineering GmbH with a focus on process automation, continuous integration systems and infrastructure tooling, mainly tooling for automation of hardware quality assurance. I speak Python, C#, TypeScript, Rust and F#. Also enough C++ to survive.
My original domain is Biotechnology with focus on Genetics and Epigenetics. I have a B.Sc. degree in Biotechnology and am an alumnus of Data Science Retreat Deep Learning Bootcamp.</description></item><item><title>Seven Sins of Python - Sin 1</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-1/</link><pubDate>Fri, 10 Dec 2021 23:28:34 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-1/</guid><description>Sin number 1: Do not modify builtins and globals This is one of the biggest no-nos for me and something that I shot myself in the foot at least twice in my career as a Python dev. I&amp;rsquo;ve also seen this used in actual production code that was deployed to some important clients.
Whence the temptation? builtins is a collection of objects that are available from within any Python script and are loaded before any script is executed by the interpreter.</description></item><item><title>Seven Sins of Python - Intro</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-intro/</link><pubDate>Fri, 10 Dec 2021 22:28:34 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-intro/</guid><description>Seven Sins of Python - intro Python is not only the most popular programming language (according to TIOBE as of 2021) but also one of the simplest to work with and easiest to learn. Python is great for a wide range of applications from web development through command line tools to large-scale automation and deep learning projects.
It is far from the snappiest programming languages in terms of performance, however many other languages can be used alongside Python when performance is of essence.</description></item><item><title>Curriculum Vitae</title><link>http://kjczarne.github.io/cv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kjczarne.github.io/cv/</guid><description>Curriculum Vitae Chris J. Czarnecki [ kjczarnecki.com ] [ kjczarne@gmail.com ]
ORCID: 0009-0008-3721-6151
Experience Junior SW Developer at Technica Engineering GmbH (Dec 2019 - Aug 2022, Germany)
Hardware testing infrastructure development Kalash (GPLv3) (Sep 2021 - Aug 2022, project overlord) Test automation runner, systems testing for automotive industry Reduced test debugging time for complex Ethernet-hardware testing platforms by 30 min per day per engineer Kissy Packet Parsers (proprietary) (Jul 2020 - Aug 2022, co-maintainer) Prost (proprietary) (Dec 2019 - Aug 2022, co-maintainer) High-level Python API for a team of 9 QA Engineers for hardware testing of CAN, LIN, FlexRay and Ethernet devices Managing CI, workflow automation and code quality assurance systems (GitLab CI, Jenkins, Docker, SonarQube) BSc Research Student at Systems Biology Department, University of Warsaw / IBB Polish Academy of Sciences (Oct 2017 - Jul 2018)</description></item></channel></rss>