<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Chris</title><link>http://kjczarne.github.io/</link><description>Recent content on Chris</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2024 Chris J. Czarnecki. Fair use permitted with authorship attribution. Commercial use disallowed without explicit permission. Some links in blog articles are affiliate links when noted.</copyright><lastBuildDate>Mon, 05 Aug 2024 21:00:39 -0400</lastBuildDate><atom:link href="http://kjczarne.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>UArr</title><link>http://kjczarne.github.io/projects/uarr/</link><pubDate>Mon, 05 Aug 2024 21:00:39 -0400</pubDate><guid>http://kjczarne.github.io/projects/uarr/</guid><description>&lt;figure class="align-center ">
&lt;img loading="lazy" src="http://kjczarne.github.io/uarr/microarray_generation.gif#center"/>
&lt;/figure>
&lt;p>&lt;a href="">&lt;del>Code&lt;/del>&lt;/a> &lt;strong>Coming Soon&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://kjczarne.github.io/uarr/uarr-slides.html">Slides&lt;/a>&lt;/p>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>Microarray technology has for many years remained a golden standard in transcriptomics. However, preparation of physical slides in wet labs involves procedures which tend to introduce occasional dirt and noise into the slide. Having to repeat experiments due to environmental noise present in the scanned images leads to increased reagent and labor costs. In this work we explore denoising methods in the narrow subfield of microarray image analysis. We propose SADGE, a domain-relevant metric to quantify the denoising power of methods considered. We introduce a synthetic data generation protocol which permits the creation of very large microarray image datasets programmatically and provides noise-free ground truth useful for objective quantification of denoising. We also train several deep learning architectures for the denoising task, with several of them beating the current state-of-the-art method on both PSNR and SADGE metrics. We propose a new training modality leveraging EATME module to condition the image reconstruction on ground-truth expression values and we introduce an additional loss term (DEL) which further enhances the denoising capabilities of the model while ensuring minimal information loss.&lt;/p></description></item><item><title>Kalash</title><link>http://kjczarne.github.io/projects/kalash/</link><pubDate>Mon, 05 Aug 2024 20:59:59 -0400</pubDate><guid>http://kjczarne.github.io/projects/kalash/</guid><description>&lt;figure class="align-center ">
&lt;img loading="lazy" src="http://kjczarne.github.io/kalash/kalash2.svg#center" height="200px"/>
&lt;/figure>
&lt;p>&lt;a href="https://github.com/Technica-Engineering/kalash">Link&lt;/a>&lt;/p>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>Kalash is a simple test runner built for large-scale test automation which relies on a simple YAML-based configuration or Python file configuration. Made for test automation at Technica Engineering GmbH.&lt;/p></description></item><item><title>Plate Ellipse Fitting</title><link>http://kjczarne.github.io/papers/plate-ellipse-fitting/</link><pubDate>Mon, 05 Aug 2024 20:32:50 -0400</pubDate><guid>http://kjczarne.github.io/papers/plate-ellipse-fitting/</guid><description>&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>Ellipse estimation is an important topic in food image processing because it can be leveraged to parameterize plates and bowls, which in turn can be used to estimate camera view angles and food portion sizes. Automatically detecting the elliptical rim of plates and bowls and estimating their ellipse parameters for data &amp;ldquo;in-the-wild&amp;rdquo; is challenging: diverse camera angles and plate shapes could have been used for capture, noisy background, multiple non-uniform plates and bowls in the image could be present. Recent advancements in foundational models offer promising capabilities for zero-shot semantic understanding and object segmentation. However, the output mask boundaries for plates and bowls generated by these models often lack consistency and precision compared to traditional ellipse fitting methods. In this paper, we combine ellipse fitting with semantic information extracted by zero-shot foundational models and propose WildEllipseFit, a method to detect and estimate the elliptical rim for plate and bowl. Evaluation on the proposed Yummly-ellipse dataset demonstrates its efficacy and zero-shot capability in real-world scenarios.&lt;/p></description></item><item><title>How Much You Ate</title><link>http://kjczarne.github.io/papers/how-much-you-ate/</link><pubDate>Sat, 03 Aug 2024 14:25:47 -0400</pubDate><guid>http://kjczarne.github.io/papers/how-much-you-ate/</guid><description>&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>Monitoring dietary intake is a crucial aspect of promoting healthy living. In recent years, advances in computer vision technology have facilitated dietary intake monitoring through the use of images and depth cameras. However, the current state-of-the-art image-based food portion estimation algorithms assume that users take images of their meals one or two times, which can be inconvenient and fail to capture food items that are not visible from a top-down perspective, such as ingredients submerged in a stew. To address these limitations, we introduce an innovative solution that utilizes stationary user-facing cameras to track food items on utensils, not requiring any change of camera perspective after installation. The shallow depth of utensils provides a more favorable angle for capturing food items, and tracking them on the utensil&amp;rsquo;s surface offers a significantly more accurate estimation of dietary intake without the need for post-meal image capture. The system is reliable for estimation of nutritional content of liquid-solid heterogeneous mixtures such as soups and stews. Through a series of experiments, we demonstrate the exceptional potential of our method as a non-invasive, user-friendly, and highly accurate dietary intake monitoring tool.&lt;/p></description></item><item><title>I used Vim for 3 weeks. Here's how it went</title><link>http://kjczarne.github.io/posts/i-used-vim-for-3-weeks/</link><pubDate>Mon, 04 Jul 2022 23:15:34 +0200</pubDate><guid>http://kjczarne.github.io/posts/i-used-vim-for-3-weeks/</guid><description>&lt;p>I have recently had a few days off from work due to festivities in Germany and I used some of my spare time to finally investigate the Vim editor.&lt;/p>
&lt;p>For those who do not know Vim is a text editor, which was developed by Bram Moolenaar and released for the first time in 1991. So it&amp;rsquo;s not that old yet. But if you consider the fact that this is an improved version of Billy Joy&amp;rsquo;s &lt;code>vi&lt;/code> editor which was originally developed in 1976 for the UNIX operating system, things start to get interesting as you realize for how long it&amp;rsquo;s been around and you&amp;rsquo;ve lived merrily without ever trying it.&lt;/p></description></item><item><title>Seven Sins of Python - Sin 7</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-7/</link><pubDate>Mon, 04 Jul 2022 22:01:01 +0200</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-7/</guid><description>&lt;h2 id="sin-number-7-from-nightmare-import-">Sin number 7: &lt;code>from nightmare import *&lt;/code>&lt;/h2>
&lt;p>I&amp;rsquo;ve been thinking long about which sin to name as the last in the grand seven of Python No-Nos. It finally came to me when working on one of legacy projects I&amp;rsquo;ve been contributing to (sadly this one is not open-source, so I cannot share the details).&lt;/p>
&lt;p>&lt;em>star&lt;/em> imports -&amp;gt; imports formed like the titular &lt;code>from nightmare import *&lt;/code>.&lt;/p>
&lt;h3 id="whence-the-temptation">Whence the temptation?&lt;/h3>
&lt;p>Star imports are tempting because they seem to reduce boilerplate. For example, instead of importing a number of objects from a module by importing them explicitly, you could just use a &lt;code>*&lt;/code> and all available objects would be imported:&lt;/p></description></item><item><title>Seven Sins of Python - Sin 6</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-6/</link><pubDate>Mon, 17 Jan 2022 20:16:32 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-6/</guid><description>&lt;h2 id="sin-number-6-packaging-not-done-right">Sin number 6: Packaging not done right&lt;/h2>
&lt;p>Packaging Python projects properly can be truly a pain in the neck. However learning how to properly set up a package is extremely valuable because adherence to standards means more people can use your package efficiently.&lt;/p>
&lt;blockquote>
&lt;p>ðŸ‘‰ The biggest sin of all things package-related is storing Python projects as simple collections of directories.&lt;/p>
&lt;/blockquote>
&lt;h3 id="whence-the-temptation">Whence the temptation?&lt;/h3>
&lt;p>Python is a simple scripting lanugage so the natural tendency newcomers have is to simply create folders with a bunch of scripts and then run those folders one by one. They tend to skip thinking about how &lt;code>pip install&lt;/code> is able to seemingly magically conjure foreign code out of nothingness and when they start reading on it, they claim it&amp;rsquo;s too much work to set it up properly.&lt;/p></description></item><item><title>Forget New Year's Resolutions, do this instead</title><link>http://kjczarne.github.io/posts/forget-new-years-resolutions-do-this-instead/</link><pubDate>Wed, 05 Jan 2022 16:53:35 +0100</pubDate><guid>http://kjczarne.github.io/posts/forget-new-years-resolutions-do-this-instead/</guid><description>&lt;p>A while ago I had a brainwave when reading about the Agile Software Development best practices. I&amp;rsquo;ve recently found this idea somewhere in my todo lists and decided to finally give it a try, especially given the fact that my new year&amp;rsquo;s resolutions never worked for me.&lt;/p>
&lt;blockquote>
&lt;p>ðŸ‘‰ The idea: forget new year&amp;rsquo;s resolutions, write user stories for your life instead.&lt;/p>
&lt;/blockquote>
&lt;p>Before I go in-depth on why I think you should write something akin to user stories for your life plans, since it&amp;rsquo;s barely the beginning of January 2022 let&amp;rsquo;s look at why new year&amp;rsquo;s resolutions are not the way to go (at least in my opinion).&lt;/p></description></item><item><title>Seven Sins of Python - Sin 5</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-5/</link><pubDate>Tue, 28 Dec 2021 23:43:52 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-5/</guid><description>&lt;h2 id="sin-number-5-global-destruction">Sin number 5: &lt;code>global&lt;/code> destruction&lt;/h2>
&lt;p>Every time I am asked about &lt;code>global&lt;/code> keyword in Python, I get a split-second heart attack. Personally I think it is one of the most unnecessary and dangerous keywords that Python has to offer. I will go one step further and postulate that if you&amp;rsquo;re using &lt;code>nonlocal&lt;/code> you&amp;rsquo;re probably doing it wrong.&lt;/p>
&lt;blockquote>
&lt;p>ðŸ‘‰ The essence of this problem is misunderstanding the purpose or the mechanics of &lt;strong>scope&lt;/strong> in Python.&lt;/p></description></item><item><title>Seven Sins of Python - Sin 4</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-4/</link><pubDate>Mon, 27 Dec 2021 20:46:12 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-4/</guid><description>&lt;h2 id="sin-number-4-exception-frenzy">Sin number 4: Exception frenzy&lt;/h2>
&lt;p>Python&amp;rsquo;s &lt;code>Exception&lt;/code> class is probably one of the most abused and misused features of the language. It&amp;rsquo;s also something that no developer can escape from.&lt;/p>
&lt;h3 id="whence-the-temptation">Whence the temptation?&lt;/h3>
&lt;p>An &lt;code>Exception&lt;/code> is a pretty natural element of any language. In all languages one will always have some need for a runtime error. In case of Python, most runtime errors inherit from the &lt;code>Exception&lt;/code> class. Though technically not a base class (for that would be &lt;code>BaseException&lt;/code>), it should be treated like a base class and it often isn&amp;rsquo;t.&lt;/p></description></item><item><title>C++ is the new COBOL</title><link>http://kjczarne.github.io/posts/c++-is-the-new-cobol/</link><pubDate>Tue, 21 Dec 2021 22:34:07 +0100</pubDate><guid>http://kjczarne.github.io/posts/c++-is-the-new-cobol/</guid><description>&lt;p>C++ is a great language. As much as I hate it I cannot ignore how important it is and how much it brought to the table in it&amp;rsquo;s 36 years of existence. I have tremendous respect for Bjarne Stroustrup for creating the so-called &lt;em>C with classes&lt;/em> and I personally think that it&amp;rsquo;s one of the best things that happened in programming language designs around the time when it came to existence.&lt;/p></description></item><item><title>The Most Important Piece of Advice</title><link>http://kjczarne.github.io/posts/the-most-important-piece-of-advice/</link><pubDate>Sat, 18 Dec 2021 01:59:20 +0100</pubDate><guid>http://kjczarne.github.io/posts/the-most-important-piece-of-advice/</guid><description>&lt;p>If were to read only one post from this blog and ignore all the others, here is a piece of advice that I would like to give to everyone who wants to vastly improve their career.&lt;/p>
&lt;blockquote>
&lt;p>ðŸ‘‰ The most priceless thing that will help you excel in anything you do is your brain. The second most priceless thing is &lt;strong>your second brain&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>What I mean by that?&lt;/p>
&lt;p>If you are able to build a robust reference system with a very short lookup time for any possible piece of information, you will excel at everything you do. The point of being great at your job is not being able to cram everything into your brain and recite formulas or code snippets from memory. If you&amp;rsquo;re able to do this, congratulations you absolutely beautiful savant human being - reach out in comments and please teach me how can I become more like you. If you&amp;rsquo;re average like me, having your little personal Wikipedia would probably help, wouldn&amp;rsquo;t it?&lt;/p></description></item><item><title>Seven Sins of Python - Sin 3</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-3/</link><pubDate>Fri, 17 Dec 2021 22:26:21 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-3/</guid><description>&lt;h2 id="sin-number-3-unconditional-romance-with-ducktyping">Sin number 3: Unconditional romance with ducktyping&lt;/h2>
&lt;h3 id="whence-the-temptation">Whence the temptation?&lt;/h3>
&lt;p>Python is truly awesome. In C++17 there is no easy way of expressing ranges. In Python an integer range \(\langle 0, 4 \rangle\) is simply &lt;code>range(0, 5)&lt;/code>.&lt;/p>
&lt;p>The syntactic simplicity and high conciseness of the language was originally related to the fact that Python does not have static typing. In Python &lt;a href="https://en.wikipedia.org/wiki/Duck_typing">ducktyping&lt;/a> means that you can actually call a function that expects an integer with a string and you will likely only realize at runtime, since there is no compilation step. It makes coding in Python, well&amp;hellip; very easy to begin with but it comes at a huge cost of bugs appearing in production code.&lt;/p></description></item><item><title>Notebooks</title><link>http://kjczarne.github.io/nb/</link><pubDate>Fri, 17 Dec 2021 00:18:34 +0100</pubDate><guid>http://kjczarne.github.io/nb/</guid><description>&lt;p>Here are links to some of the Jupyter Notebooks mentioned in my blog posts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kjczarne/kjczarne.github.io/tree/master/content/notebooks/python-sin-2.ipynb">Python - timing builtins vs. loops&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Seven Sins of Python - Sin 2</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-2/</link><pubDate>Thu, 16 Dec 2021 23:51:37 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-2/</guid><description>&lt;h2 id="sin-number-2-too-few-optimized-functions-used">Sin number 2: too few optimized functions used&lt;/h2>
&lt;p>This one is pretty common especially for newcomers who have learnt enough about Python to be able to loop over data structures but haven&amp;rsquo;t yet realized how slow Python loops really are.&lt;/p>
&lt;h3 id="whence-the-temptation">Whence the temptation?&lt;/h3>
&lt;p>If you&amp;rsquo;re fresh to Python, the temptation to create &lt;code>for&lt;/code> loops everywhere for lists and dictionaries is immense. Consider a fairly simple example, where we loop over 100000 random integers and we apply a simple mathematical operation to each of those integers. The most straightforward solution would be:&lt;/p></description></item><item><title>About Me</title><link>http://kjczarne.github.io/about/</link><pubDate>Fri, 10 Dec 2021 23:28:34 +0100</pubDate><guid>http://kjczarne.github.io/about/</guid><description>&lt;p>I have spent almost 3 years as a Software Developer at Technica Engineering GmbH with a focus on process automation, continuous integration systems and infrastructure tooling, mainly tooling for automation of hardware quality assurance. I speak Python, C#, TypeScript, Rust and F#. Also enough C++ to survive.&lt;/p>
&lt;p>My original domain is Biotechnology with focus on Genetics and Epigenetics. I have a B.Sc. degree in Biotechnology and am an alumnus of Data Science Retreat Deep Learning Bootcamp. Currently pursuing M.A.Sc. degree in Systems Design Engineering at the University of Waterloo.&lt;/p></description></item><item><title>Seven Sins of Python - Sin 1</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-sin-1/</link><pubDate>Fri, 10 Dec 2021 23:28:34 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-sin-1/</guid><description>&lt;h2 id="sin-number-1-do-not-modify-builtins-and-globals">Sin number 1: Do not modify &lt;code>builtins&lt;/code> and &lt;code>globals&lt;/code>&lt;/h2>
&lt;p>This is one of the biggest no-nos for me and something that I shot myself in the foot at least twice in my career as a Python dev. I&amp;rsquo;ve also seen this used in actual production code that was deployed to some important clients.&lt;/p>
&lt;h3 id="whence-the-temptation">Whence the temptation?&lt;/h3>
&lt;ul>
&lt;li>&lt;code>builtins&lt;/code> is a collection of objects that are available from within any Python script and are loaded before any script is executed by the interpreter. If you&amp;rsquo;ve ever used &lt;code>int&lt;/code>, &lt;code>bytes&lt;/code>, &lt;code>dict&lt;/code>, &lt;code>list&lt;/code>, etc. then these all come from &lt;code>builtins&lt;/code>.&lt;/li>
&lt;li>&lt;code>globals&lt;/code> is a collection of objects that exist in current global scope, so objects accessible to any module at a particular point in time when your script is running.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>ðŸ‘‰ It is tempting to modify the &lt;code>builtins&lt;/code> to expose a particular custom function or object globally to any running Python script without the need to &lt;code>import&lt;/code> a module explicitly. Likewise the modification of &lt;code>globals&lt;/code> can enable such magic as dynamic imports of modules that are a part of the same package without actually using the explicit module names.&lt;/p></description></item><item><title>Seven Sins of Python - Intro</title><link>http://kjczarne.github.io/posts/seven-sins-of-python-intro/</link><pubDate>Fri, 10 Dec 2021 22:28:34 +0100</pubDate><guid>http://kjczarne.github.io/posts/seven-sins-of-python-intro/</guid><description>&lt;h2 id="seven-sins-of-python---intro">Seven Sins of Python - intro&lt;/h2>
&lt;p>Python is not only the most popular programming language (according to TIOBE as of 2021) but also one of the simplest to work with and easiest to learn. Python is great for a wide range of applications from web development through command line tools to large-scale automation and deep learning projects.&lt;/p>
&lt;p>It is far from the snappiest programming languages in terms of performance, however many other languages can be used alongside Python when performance is of essence.&lt;/p></description></item><item><title>Curriculum Vitae</title><link>http://kjczarne.github.io/cv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kjczarne.github.io/cv/</guid><description>&lt;h1 style="color:#6b04d9;text-align:center">Curriculum Vitae&lt;/h1>
&lt;h2 id="chris-j.-czarnecki" style="color:#6b04d9;text-align:center">Chris J. Czarnecki&lt;/h2>
&lt;p style="text-align:center">[ &lt;a href="https://kjczarnecki.com/">kjczarnecki.com&lt;/a> ] [
&lt;a href="mailto:kjczarne@gmail.com">kjczarne@gmail.com&lt;/a> ]&lt;/p>
&lt;p style="text-align:center">ORCID: &lt;a href="https://orcid.org/0009-0008-3721-6151">0009-0008-3721-6151&lt;/a>&lt;/p>
&lt;h2 style="color:#6b04d9;text-align:center">Experience&lt;/h2>
&lt;h3 style="color:#6b04d9;text-align:center">AI Engineer at KisoJi Biotech&lt;/h3>
&lt;p style="font-weight:600;text-align:center">(Aug 2024 - now, Waterloo, ON, Canada)&lt;/p>
&lt;ul>
&lt;li>Applying and developing generative models in antibody design&lt;/li>
&lt;/ul>
&lt;h3 style="color:#6b04d9;text-align:center">Junior SW Developer at Technica Engineering GmbH&lt;/h3>
&lt;p style="font-weight:600;text-align:center">(Dec 2019 - Aug 2022, Munich, Germany)&lt;/p>
&lt;ul>
&lt;li>Hardware testing infrastructure development
&lt;ul>
&lt;li>&lt;a href="https://github.com/Technica-Engineering/kalash">&lt;strong>Kalash&lt;/strong> (GPLv3)&lt;/a> (Sep 2021 - Aug 2022, project overlord)
&lt;ul>
&lt;li>Test automation runner, systems testing for automotive industry&lt;/li>
&lt;li>Reduced test debugging time for complex Ethernet-hardware testing platforms by 30 min per day per engineer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Kissy Packet Parsers&lt;/strong> (proprietary) (Jul 2020 - Aug 2022, co-maintainer)&lt;/li>
&lt;li>&lt;strong>Prost&lt;/strong> (proprietary) (Dec 2019 - Aug 2022, co-maintainer)
&lt;ul>
&lt;li>High-level Python API for a team of 9 QA Engineers for hardware testing of CAN, LIN, FlexRay and Ethernet devices&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Managing CI, workflow automation and code quality assurance systems (GitLab CI, Jenkins, Docker, SonarQube)&lt;/li>
&lt;/ul>
&lt;h3 style="color:#6b04d9;text-align:center">BSc Research Student at Systems Biology Department, University of Warsaw / IBB Polish Academy of Sciences&lt;/h3>
&lt;p style="font-weight:600;text-align:center">(Oct 2017 - Jul 2018, Warsaw, Poland)&lt;/p></description></item></channel></rss>