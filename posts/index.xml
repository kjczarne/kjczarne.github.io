<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Klebstoff</title><link>http://kjczarne.github.io/posts/</link><description>Recent content in Posts on Klebstoff</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright 2021 Krzysztof J. Czarnecki. Fair use permitted with authorship attribution. Commercial use disallowed without explicit permission.</copyright><lastBuildDate>Thu, 16 Dec 2021 23:51:37 +0100</lastBuildDate><atom:link href="http://kjczarne.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Seven Sins of Python - Sin 2</title><link>http://kjczarne.github.io/2021-12-16-seven-sins-of-python-sin-2/</link><pubDate>Thu, 16 Dec 2021 23:51:37 +0100</pubDate><guid>http://kjczarne.github.io/2021-12-16-seven-sins-of-python-sin-2/</guid><description>Sin number 2: too few optimized functions used This one is pretty common especially for newcomers who have learnt enough about Python to be able to loop over data structures but haven&amp;rsquo;t yet realized how slow Python loops really are.
Whence the temptation? If you&amp;rsquo;re fresh to Python, the temptation to create for loops everywhere for lists and dictionaries is immense. Consider a fairly simple example, where we loop over 100000 random integers and we apply a simple mathematical operation to each of those integers.</description></item><item><title>Seven Sins of Python - Sin 1</title><link>http://kjczarne.github.io/2021-12-10-seven-sins-of-python-sin-1/</link><pubDate>Fri, 10 Dec 2021 23:28:34 +0100</pubDate><guid>http://kjczarne.github.io/2021-12-10-seven-sins-of-python-sin-1/</guid><description>Sin number 1: Do not modify builtins and globals This is one of the biggest no-nos for me and something that I shot myself in the foot at least twice in my career as a Python dev. I&amp;rsquo;ve also seen this used in actual production code that was deployed to some important clients.
Whence the temptation? builtins is a collection of objects that are available from within any Python script and are loaded before any script is executed by the interpreter.</description></item><item><title>Seven Sins of Python - Intro</title><link>http://kjczarne.github.io/2021-12-10-seven-sins-of-python-intro/</link><pubDate>Fri, 10 Dec 2021 22:28:34 +0100</pubDate><guid>http://kjczarne.github.io/2021-12-10-seven-sins-of-python-intro/</guid><description>Seven Sins of Python - intro Python is not only the most popular programming language (according to TIOBE as of 2021) but also one of the simplest to work with and easiest to learn. Python is great for a wide range of applications from web development through command line tools to large-scale automation and deep learning projects.
It is far from the snappiest programming languages in terms of performance, however many other languages can be used alongside Python when performance is of essence.</description></item></channel></rss>